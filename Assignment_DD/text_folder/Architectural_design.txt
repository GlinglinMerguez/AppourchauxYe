2.1 Overview

The S&C platform implementation will leverage a three-tier architecture.  This architectural pattern creates a clear separation of concerns by organizing the application into three distinct and independent layers:
The Presentation layer (Front-end) which is the user interface, the application layer (Back-end) which is the processing part, and the Data layer which is the information storage and retrieval.
This architectural choice offers several strategic advantages. Beyond the commonly cited benefit of independent development and scaling, it provides enhanced security through layer isolation, preventing direct access to the data tier from the presentation layer.
The modular nature of this architecture also facilitates maintenance and troubleshooting, as issues can be isolated to specific tiers.
This also enables technological flexibility, each tier can utilize different technologies best suited to its specific requirements, like different programmation languages.

INSERT IMAGE

2.1.1 Distributed view

INSERT IMAGE

The arrows represent possible comunication paths.

2.2 Component view

For the three tier architecture that we will use, the backend will contain an API which will allow the web app to communicate and query the back-end. The backend will also interact with the data layer for storage and retrieval.
The main components of the backend are:
 - AuthenticationManager: provides the functionalities related to the authentication of the user on the platform
 - CVManager: provides the functionalities related to the management of student CVs
 - ApplicationManager: provides the functionalities related to the management of student applications
 - OfferManager: provides the functionalities related to the management of company offers
 - MatchingAlgorithm: takes CVs, offers and feedback to compute potential matches to companies and students, then sends reccomendations to users in the form of a notification
 - ComplaintManager: provides the functionalities related to the management of user complaints and discusions
 - SuggestionManager: periodicaly sends suggestions on how to improve CVs and Offers to Student and Users
 - RecruitingManager: encompasses all of the recruiting process, including interviews, questionnaires, and gathering of answers.
 - MonitoringManager: allows the monitoring of the recruiting process by the users 
 - Database: stores all the data of the app
 - API: This allows the backend to be called by the frontend, and routes the queries to the appropriate internal components.

 The main component of the frontend is:
 - WebApp: this is the interface between the app and the user. It contains not only the graphics but also the logic needed to interact efficiently with the API of the backend

INSERT IMAGE

2.3 Deployment view

Here is the deployement showing the topological distribution of the S&C platform.

INSERT IMAGE

The operating system (OS) runs on the computer, the Browser runs inside of the OS, and the S&C client runs inside of the browse.
When a request is sent to the backend, it goes through a firewall to filter out eventual malicious requests. The request then goes through a load balancer which redirect trafic to prevent overload.
The application server (backend) communicates with the database via TCP/IP.

2.4 Runtime view

2.6. Selected architectural styles and patterns

2.6.1. 3-tier Architecture

The S&C platform implements a three-tiered architectural style, selected for its robust separation of concerns through three distinct layers:
 - The web server: this is the presentation tier and provides the user interface. This is usually a web page or a web site. The content can be static or dynamic, and uses technologies such as HTML, CSS and Javascript.
 - The application server: this is the middle tier, implementing core business logic and processing.
 - The database server: this is the backend tier of a web application. It runs on DBMS, typically MySQL.

2.6.2. Model-View-Controller (MVC) Pattern
For the S&C platform, the MVC pattern provides an optimal structure for web application development through clear separation of responsibilities:

The Model manages application data and business rules, ensuring data integrity and handling business operations. The View transforms data into user-friendly interfaces, allowing multiple representations of the same information depending on user needs. The Controller orchestrates the interaction between users and the system, processing inputs and coordinating responses between Model and View components. This separation enhances maintainability and facilitates independent development of components.

2.6.3. Facade Pattern
To streamline request handling, the platform employs the Facade pattern, which provides a simplified interface to the complex underlying system. This architectural choice offers several advantages: it reduces system complexity from the client's perspective, improves API usability, and facilitates future system modifications by decoupling components. The pattern serves as an excellent foundation for evolving the system toward a more modular architecture.

2.7. Additional Design Considerations

The platform's architecture incorporates several key design decisions to ensure optimal performance and reliability:

For availability, the system implements load balancing mechanisms to distribute traffic efficiently and maintain high availability. Database replication strategies are employed to eliminate single points of failure and ensure continuous service.

Regarding data management, the system utilizes a sophisticated database structure for storing user information, complemented by optimized data structures to enhance query performance and response times.

Security is maintained through a comprehensive firewall system that filters and protects against various cyber threats, forming a crucial component of the platform's defense strategy.